{
  
    
        "post0": {
            "title": "Toggling Themes",
            "content": "Hacks Part 2 . . Switch between 4 themes . Toggle Theme",
            "url": "https://tri3devopteam.github.io/devops/markdown/week%2020/2023/04/27/theme.html",
            "relUrl": "/markdown/week%2020/2023/04/27/theme.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Number Guesser",
            "content": "Hacks Part 3 . Guess the Number . Guess the Number . Try to guess the number between 1 and 100. . Submit . .",
            "url": "https://tri3devopteam.github.io/devops/markdown/week%2020/2023/04/27/numberguesser.html",
            "relUrl": "/markdown/week%2020/2023/04/27/numberguesser.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "AWS Databases",
            "content": "What are the different types of AWS Databases? . In order to meet the particular requirements of various use cases, AWS provides a variety of database services, each with its own special features and advantages. . Relational databases are among the most widely used AWS database types. Amazon Aurora, Amazon RDS, and Amazon Redshift are just a few of the relational databases that AWS offers. These databases are excellent for structured data and can be applied to financial applications, e-commerce platforms, and content management systems. . Non-relational databases, also known as NoSQL databases, are also provided by AWS. These databases can easily handle high data volumes and were made for unstructured data. Amazon DocumentDB and Amazon DynamoDB are two well-known NoSQL databases that AWS offers. . The graph database is another kind of database that AWS provides. Graph databases are made to store and manage highly connected data, like that found in social networks or recommendation systems. One example of a graph database provided by AWS is Amazon Neptune. . In-memory databases are available through AWS, they offer low-latency speed for applications that require quick data access. Amazon ElastiCache is an example of an in-memory database that can be used for apps like gaming. . Code Example . import boto3 # Create a DynamoDB client dynamodb = boto3.client(&#39;dynamodb&#39;) # Create a table in DynamoDB table_name = &#39;my-table&#39; key_schema = [{&#39;AttributeName&#39;: &#39;id&#39;, &#39;KeyType&#39;: &#39;HASH&#39;}] attribute_definitions = [{&#39;AttributeName&#39;: &#39;id&#39;, &#39;AttributeType&#39;: &#39;S&#39;}] provisioned_throughput = {&#39;ReadCapacityUnits&#39;: 5, &#39;WriteCapacityUnits&#39;: 5} dynamodb.create_table( TableName=table_name, KeySchema=key_schema, AttributeDefinitions=attribute_definitions, ProvisionedThroughput=provisioned_throughput ) # Create an item in DynamoDB item = {&#39;id&#39;: {&#39;S&#39;: &#39;123&#39;}, &#39;name&#39;: {&#39;S&#39;: &#39;John&#39;}} dynamodb.put_item(TableName=table_name, Item=item) # Query items in DynamoDB response = dynamodb.query( TableName=table_name, KeyConditionExpression=&#39;id = :id&#39;, ExpressionAttributeValues={&#39;:id&#39;: {&#39;S&#39;: &#39;123&#39;}} ) items = response[&#39;Items&#39;] # Create an RDS client rds = boto3.client(&#39;rds&#39;) # Create a database instance in RDS db_instance_identifier = &#39;my-instance&#39; db_instance_class = &#39;db.t2.micro&#39; engine = &#39;mysql&#39; master_username = &#39;admin&#39; master_password = &#39;password&#39; allocated_storage = 20 rds.create_db_instance( DBInstanceIdentifier=db_instance_identifier, DBInstanceClass=db_instance_class, Engine=engine, MasterUsername=master_username, MasterUserPassword=master_password, AllocatedStorage=allocated_storage ) # Connect to a database instance in RDS import mysql.connector cnx = mysql.connector.connect( host=&#39;my-instance.cqnkj1234abc.us-east-1.rds.amazonaws.com&#39;, user=&#39;admin&#39;, password=&#39;password&#39;, database=&#39;my-database&#39; ) # Create a table in MySQL cursor = cnx.cursor() create_table_query = ( &quot;CREATE TABLE users (&quot; &quot; id INT NOT NULL AUTO_INCREMENT,&quot; &quot; name VARCHAR(50) NOT NULL,&quot; &quot; PRIMARY KEY (id)&quot; &quot;) ENGINE=InnoDB&quot; ) cursor.execute(create_table_query) # Insert data into a MySQL table insert_query = &quot;INSERT INTO users (name) VALUES (%s)&quot; data = (&#39;John&#39;,) cursor.execute(insert_query, data) cnx.commit() # Query data from a MySQL table select_query = &quot;SELECT * FROM users&quot; cursor.execute(select_query) rows = cursor.fetchall() # Close database connections cursor.close() cnx.close() # test . Quiz . What is the main difference between relational and non-relational databases? . A. Relational databases are only used for structured data, while non-relational databases are only used for unstructured data. . B. Relational databases can easily handle high data volumes, while non-relational databases cannot. . C. Relational databases are based on tables and use SQL, while non-relational databases are based on collections and use JSON-like documents. . D. Relational databases are more expensive than non-relational databases. . Which AWS database service is best suited for applications that require low-latency speed? . A. Amazon ElastiCache . B. Amazon Neptune . C. Amazon DocumentDB . D. Amazon RDS . What is the purpose of the code example provided in the lesson? . A. To demonstrate how to create a table in Amazon Aurora. . B. To show how to query data from a DynamoDB table. . C. To provide an example of how to connect to a database instance in RDS using Python. . D. To showcase how to insert data into a MySQL table. . cac .",
            "url": "https://tri3devopteam.github.io/devops/2023/04/27/DifferentAWS.html",
            "relUrl": "/2023/04/27/DifferentAWS.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Duck DNS & AWS Interactive Notebook and HACKS",
            "content": "Introduction: . Introductory Question . In 2-3 sentences, explain the purpose of DuckDNS as a DNS alternative to what is already in place (Freenom). Do you think we should use one or the other? Why or why not? . Answer: __ . Sample Answer: . DuckDNS provides a free dynamic DNS service that allows users to assign a domain name to a dynamic IP address. It can be used as an alternative to Freenom, which also offers free domain names. The choice between the two depends on individual needs and preferences, such as ease of use, availability of domain extensions, and customer support. . from PIL import Image duckdns = Image.open(&quot;../images/duckdns.png&quot;) display(duckdns) . HACKS . Quiz Time . Now that we have gone over all the neccessary details about what DNS, AWS, and how to set them up using DuckDNS and AWS Servers. Now it is a time for a quiz to test your applications. . import getpass, sys # method to display question and get user&#39;s answers def question_with_response(prompt, qCount): print(&quot;Question &quot; + str(qCount) + &quot; : &quot; + prompt) msg = input() return msg # dictionary to hold questions and answers as key : value pairs questionsDict = {&quot;What does Domain Name Server represent?&quot;: &quot;DNS&quot;, &quot;What does this Represent: Amazon Web Services, which is a cloud computing platform provided by Amazon.&quot;: &quot;AWS&quot;, &quot;What is the first Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project&quot;: &quot;1&quot;, &quot;What is the third Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project&quot;: &quot;3&quot;, &quot;What is the fourth Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project&quot;: &quot;.4&quot;, &quot;What is the second Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project&quot;: &quot;2&quot;, &quot;What files are you supposed to edit after finishing the first steps of setting up the server and cloning it within the AWS Server? 1: Edit the docker files and docker.yml, 2: Edit the main.py file to change the characteristcs.&quot;: &quot;1&quot;, &quot;What is the first step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org&quot;: &quot;1&quot;, &quot;What is the second step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org&quot;: &quot;3&quot;, &quot;What is the third step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org&quot;: &quot;2&quot;, &quot;What is the fourth step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org&quot;: &quot;4&quot; } # number of questions as length of the dictionary questions = len(questionsDict) # set correct to 0 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) print(&quot;Are you ready to take a test! Press Enter key to begin. Best of luck :)&quot;) input() questionCount = 0 # iterate over list of keys from the dictionary. pass dictionary key as question to the question_with_response function for key in questionsDict: questionCount += 1 rsp = question_with_response(key, questionCount) # compare the value from the dictionary to the user&#39;s input if rsp.lower() == questionsDict[key].lower(): print(rsp + &quot; is correct! Good Job!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! Better Luck next time.&quot;) # print final score print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # calculate percentage page = correct/questions * 100 # print percentage print(&quot;Total Percentage: &quot; + str (format(page,&quot;.2f&quot;)) + &quot;%&quot;) . Hello, shivansh running /home/shivansh/anaconda3/bin/python You will be asked 11 questions. Are you ready to take a test! Press Enter key to begin. Best of luck :) Question 1 : What does Domain Name Server represent? DNS is correct! Good Job! Question 2 : What does this Represent: Amazon Web Services, which is a cloud computing platform provided by Amazon. AWS is correct! Good Job! Question 3 : What is the first Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project 1 is correct! Good Job! Question 4 : What is the third Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project 3 is correct! Good Job! Question 5 : What is the fourth Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project 2 is incorrect! Better Luck next time. Question 6 : What is the second Step to setting up an AWS Server? 1: Connecting to a Ubuntu EC2 Instance, 2: Start updating the system, 3: Clone the repository which one wishes to deploy, 4: Run the command: main.py to start the project 1 is incorrect! Better Luck next time. Question 7 : What files are you supposed to edit after finishing the first steps of setting up the server and cloning it within the AWS Server? 1: Edit the docker files and docker.yml, 2: Edit the main.py file to change the characteristcs. 1 is correct! Good Job! Question 8 : What is the first step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org 1 is correct! Good Job! Question 9 : What is the second step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org 3 is correct! Good Job! Question 10 : What is the third step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org 2 is correct! Good Job! Question 11 : What is the fourth step to setting up a DuckDNS Server? 1: Sign in with your DuckDNS account using Github, 2: Configure current ip to the IP address that you want to access and click update ip button , 3: Create the subdomain, 4: Access site by typing in subdomain.duckdns.org 4 is correct! Good Job! shivansh you scored 9/11 Total Percentage: 81.82% . FRQ . Complete the answers in your own words . Question 1: How does AWS Work? . Question 2: How is AWS useful for projects? . Question 3: How does Duck DNS Work? . Question 4: How is Duck DNS useful for projects? . Reflection .",
            "url": "https://tri3devopteam.github.io/devops/2023/04/18/duckdnsaws.html",
            "relUrl": "/2023/04/18/duckdnsaws.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "KASM Virtual Desktop on EC2 Guide",
            "content": "Single Server Installation . We will be going through the single server installation, as this is the most efficient method in terms of ease of deployment. . QUESTION: What are the other installation types? How are they similar or different from the single server installation? . Minimum Requirements . Minimum Requirements . Memory | 4 GB | . CPU | 2 cores | . Storage | 50 GB on SSD | . Installation . Run the following in Terminal to Install: . cd /tmp curl -O https://kasm-static-content.s3.amazonaws.com/kasm_release_1.12.0.d4fd8a.tar.gz # This is downloading the latest version of KASM workspaces to the /tmp folder. tar -xf kasm_release_1.12.0.d4fd8a.tar.gz # This is extracting the package which was just downloaded. sudo bash kasm_release/install.sh # The installation script is being run for KASM. . Swap Partition . As recommended by KASM, a swap partition should be created for a smooth experience. Without a swap partition, a host with memory requirements being sufficiently met can meet stability problems. . If your PC does not have a swap file, you will need to create one immediately after installing KASM. . Run the following command in Terminal: . sudo bash kasm_release/install.sh --accept-eula --swap-size 4096 . Login Information . After the package for the latest version of KASM has been extracted to the right folder and a swap partition has been created, you can log into the web application. The web application runs on port 443 (though configurations can be altered to run on another port): . https://WEBAPP_SERVER_NAME_HERE . You want to login with the Administrator account, which is defaulted to admin@kasm.local with randomly generated passwords. This will allow you to manage environments and workspaces. . KASM Configurations . Once you are logged in, you can change KASM configuration settings as an administrator by navigating to the &quot;Settings&quot; tab on the left side. . Here are all of the settings stored in server settings which you can research in your free time: https://kasmweb.com/docs/latest/guide/settings.html . Here, there are hundreds of settings which you can take a look at. Depending on the setting you are changing, you may need to restart ALL KASM services or certain individual services. . Take a look below for the commands for these service restarts: . cd /opt/kasm/bin # The opt directory is for all software and packages that are not installed by default on Linux. # This makes sense, since we installed KASM separately. ./stop ./start # All the services have been restarted. # Restarting individual services on the server: sudo docker restart kasm_agent sudo docker restart kasm_api sudo docker restart kasm_manager sudo docker restart kasm_db sudo docker restart kasm_proxy . IMPORTANT . You should be able to run all of this in an ec2 instance on AWS and then be able to run docker images stored on your instance through KASM. However, storage on EC2 instances is limited. If you are able to run docker images on an ec2 instance with KASM, that would be really impressive. . HACKS FOR KASM . In 3-4 sentences, please explain the significance of virtual desktops and KASM. How can virtual desktops such as these be utilized in our AP CSP environment? (0.45) . | Attempt to work through the KASM setup with your team. Attach two screenshots to show that you have successfully gone through the setup: The first screenshot of KASM generating your credentials, and the second screenshot of the KASM workspace once you have logged in. (0.45) . |",
            "url": "https://tri3devopteam.github.io/devops/2023/04/13/kasmec2.html",
            "relUrl": "/2023/04/13/kasmec2.html",
            "date": " • Apr 13, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Alternatives to Certbot",
            "content": "acme.sh: acme.sh is a command-line tool that can be used to obtain and renew SSL/TLS certificates from Let&#39;s Encrypt, as well as other certificate authorities. . ZeroSSL: ZeroSSL is a web-based tool that allows you to generate free SSL/TLS certificates for your website. It also provides an API that can be used to automate the certificate renewal process. . OpenSSL: OpenSSL is a popular open-source toolkit used to implement the SSL/TLS protocols. It includes a command-line tool that can be used to generate SSL/TLS certificates. . dehydrated: dehydrated is a simple and lightweight shell script for managing SSL/TLS certificates. It supports multiple certificate authorities and can be easily integrated with other tools and scripts. . Lego: Lego is another command-line tool that supports multiple certificate authorities, including Let&#39;s Encrypt, Buypass, and ZeroSSL. It also provides a library that can be used to integrate certificate management into your own applications. . There are several other alternatives available, but these are some of the most popular and well-regarded options. Ultimately, the choice of tool will depend on your specific needs and preferences. . OpenSSL . Making Keys: OpenSSL helps to create a secret key and a shared key. The secret key is kept hidden and helps to code data sent to the computer, while the shared key is given to others so they can code data sent to the computer. . Signing Certificates: OpenSSL can help to sign a certificate request with a trusted group called a certificate authority (CA). This request has the shared key and other important info about the computer. The CA checks this info, and if it&#39;s good, they give a signed certificate that the computer can use to show others who it is. . SSL/TLS Handshake: When someone connects to a computer, they do an SSL/TLS handshake. During this, the computer shows its signed certificate, and the other person checks if it&#39;s good and from a trusted CA. The other person also makes a random key for the session, which is used to code data sent between them. . Coding Data: After the SSL/TLS handshake, the person and the computer can send coded data using the session key. This makes sure that any data sent is safe from being listened to or messed with. . OpenSSL has some tools you can use to do these jobs, like openssl genpkey for making keys, openssl req for signing certificates, and openssl s_server for making an SSL/TLS computer. OpenSSL can also be added to web servers like Apache and Nginx to help code web data. In short, OpenSSL is a strong and helpful tool for coding with SSL/TLS, and many people use it on the internet to keep data safe. . Quiz . What is the purpose of OpenSSL? a) To generate public keys b) To encrypt data c) To sign certificates d) All of the above . What is the role of the private key in OpenSSL? a) It is made available to clients to encrypt data b) It is used to decrypt data sent to the server c) It is used to encrypt data sent to the server d) It is kept secret and used to encrypt data sent to the server . What is the SSL/TLS handshake? a) The process of signing a certificate request with a trusted CA b) The process of generating a random session key c) The process of exchanging encrypted data between the client and server d) The process of presenting a signed certificate to the client and verifying its validity . What are some command-line tools provided by OpenSSL? a) openssl genpkey, openssl signcert, openssl encrypt b) openssl keygen, openssl req, openssl s_server c) openssl createkey, openssl ca, openssl encrypt d) openssl generatekey, openssl certreq, openssl server . Lego . Lego is an open-source, cross-platform ACME client that automates the process of obtaining and renewing SSL/TLS certificates from Let&#39;s Encrypt. . Key Features: . Simple and easy-to-use interface for managing SSL/TLS certificates for your domains. | Supports both HTTP-01 and DNS-01 challenges for domain validation. | Supports wildcards and multiple domains in a single certificate. | Built-in integrations with popular web servers and load balancers, including Apache, Nginx, HAProxy, and Caddy. Stores configuration in a simple JSON file format, which makes it easy to manage and version control. Provides a number of advanced configuration options, such as custom DNS providers and HTTP challenge servers, and different account and certificate storage backends. Compatible with a wide range of platforms and operating systems, including Linux, macOS, Windows, and FreeBSD. Provides pre-built binaries for many popular architectures, making it easy to install and use on different systems. How it Works: | . Lego communicates with the Let&#39;s Encrypt server using the ACME protocol to request and manage SSL/TLS certificates. To obtain a certificate, Lego first validates ownership of the domain by completing an HTTP-01 or DNS-01 challenge. Once the domain is validated, Lego generates a private key and a certificate signing request (CSR), which is then sent to Let&#39;s Encrypt to generate the certificate. Lego then stores the obtained certificate and private key, and configures the web server to use them for SSL/TLS encryption. Lego automatically renews the certificates before they expire, ensuring that your domains are always secured with up-to-date certificates. . Overall, Lego provides a simple and powerful solution for managing SSL/TLS certificates for your domains, and is an excellent choice for anyone looking to automate the process of obtaining and renewing SSL/TLS certificates with Let&#39;s Encrypt. . Quiz . What is Lego? A) A popular building block toy B) An open-source ACME client for obtaining SSL/TLS certificates C) A web server software D) A DNS provider . What challenges does Lego support for domain validation? A) HTTP-02 and DNS-03 B) HTTP-01 and DNS-01 C) HTTPS-01 and DNS-01 D) TLS-01 and DNS-02 . What features does Lego provide for managing SSL/TLS certificates? A) Integration with popular web servers and load balancers B) Advanced configuration options, such as custom DNS providers and HTTP challenge servers C) Support for multiple domains in a single certificate and wildcard certificates D) All of the above . How does Lego ensure that SSL/TLS certificates are always up-to-date? A) By sending reminders to the domain owner&#39;s email B) By automatically renewing the certificates before they expire C) By generating new private keys and certificate signing requests every month D) By providing manual renewal options only . Quiz answers . B | B | D | B | Hacks . Research and compare the security features of OpenSSL and LibreSSL, and write about the recent vulnerabilities within it. Write about your research in a fastpages blog post. It can be the same post that has your screenshot for the Certbot Hacks. .",
            "url": "https://tri3devopteam.github.io/devops/2023/04/03/CertbotAlternatives.html",
            "relUrl": "/2023/04/03/CertbotAlternatives.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "acme.sh: acme.sh is a shell script that provides an alternative way to obtain and manage SSL/TLS certificates. It is a lightweight and versatile tool that can be used on a wide variety of web servers, including Apache, Nginx, and HAProxy. acme.sh uses the ACME protocol to communicate with Let&#39;s Encrypt and other certificate authorities, and supports a variety of verification methods, including DNS, HTTP, and TLS-SNI. Here&#39;s an example Python code that uses acme.sh to obtain a certificate for a domain: . import subprocess # set the domain name and web root directory domain = &quot;example.com&quot; webroot = &quot;/var/www/html&quot; # run the acme.sh command to obtain a certificate cmd = f&quot;acme.sh --issue --webroot {webroot} -d {domain}&quot; subprocess.run(cmd.split()) . ZeroSSL: ZeroSSL is a web-based certificate management tool that provides an alternative to Certbot. It allows you to obtain and manage SSL/TLS certificates through a web interface, without the need to install any software on your server. ZeroSSL supports both Let&#39;s Encrypt and Sectigo certificate authorities, and offers a variety of verification methods, including HTTP, DNS, and Email. Here&#39;s an example Python code that uses ZeroSSL to obtain a certificate for a domain: . import requests # set the domain name and email address domain = &quot;example.com&quot; email = &quot;user@example.com&quot; # make a request to ZeroSSL to obtain a certificate response = requests.post(&quot;https://zerossl.com/api/v2/certificates&quot;, json={ &quot;email&quot;: email, &quot;domains&quot;: [domain], &quot;certificate_validity_days&quot;: 90, &quot;validation_methods&quot;: [&quot;http&quot;, &quot;https&quot;, &quot;dns&quot;] }) # get the certificate data from the response certificate = response.json()[&quot;certificate&quot;] private_key = response.json()[&quot;key&quot;] . ego: lego is a command-line tool that provides an alternative to Certbot for managing SSL/TLS certificates. It supports a variety of web servers, including Apache, Nginx, and Caddy, and uses the ACME protocol to communicate with Let&#39;s Encrypt and other certificate authorities. lego offers a wide range of features, including support for wildcard certificates, DNS validation, and certificate bundling. Here&#39;s an example Python code that uses lego to obtain a certificate for a domain: .",
            "url": "https://tri3devopteam.github.io/devops/2023/04/03/Certbot.html",
            "relUrl": "/2023/04/03/Certbot.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Guide to SQLite vs AWS alternate databases",
            "content": "What is AWS . AWS offers several alternate databases in addition to their popular managed relational database service (RDS). These alternate databases provide different functionality and are optimized for specific use cases. One such alternate database is Amazon DynamoDB, which is a fast and flexible NoSQL database service that allows users to store and retrieve any amount of data, with low latency and predictable performance.Another alternate database offered by AWS is Amazon Neptune, which is a fast, reliable, and fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. . What is SQlite . SQLite is a widely used embedded database management system that is known for its simplicity, reliability, and ease of use. It is a serverless, self-contained, and transactional database engine that is designed to be embedded into applications rather than run as a standalone server. SQLite databases are stored as files on disk, making them easy to backup, copy, and transport between systems. They support standard SQL syntax and are fully ACID compliant, ensuring data consistency and reliability. . . AWS Vs SQlite . SQLite is a lightweight, file-based relational database management system (RDBMS) that is well-suited for small-scale projects or applications. AWS offers a wide range of database options, including relational, NoSQL, and in-memory databases, each with its own set of pros and cons. Here are some of the pros and cons of alternative AWS databases in comparison to SQLite: . Amazon Relational Database Service (RDS): Amazon RDS is a fully managed relational database service that supports multiple database engines, including MySQL, PostgreSQL, and Oracle. Pros: . Scalability: RDS can easily scale to handle a large amount of traffic and data. High Availability: RDS offers automatic failover and backup options to ensure data availability. Security: RDS offers robust security features, such as encryption at rest and in transit. Managed Service: RDS is a managed service, meaning that AWS handles the administrative tasks of the database, such as backups, updates, and maintenance. Cons: . Cost: RDS can be more expensive than SQLite, especially for small-scale projects or applications. Complexity: RDS can be more complex to set up and manage than SQLite. Amazon DynamoDB: Amazon DynamoDB is a NoSQL database that can handle large amounts of data and is designed for scalability and high availability. . AWS Databases . Amazon Web Services (AWS) provides a range of database services to meet various data storage and processing needs. Some of the popular AWS databases are: . Amazon Relational Database Service (RDS): It provides fully managed relational databases, such as MySQL, PostgreSQL, Oracle, SQL Server, and Amazon Aurora. . Amazon DynamoDB: It is a fully managed NoSQL database service that provides high performance, scalability, and automatic scaling of throughput capacity. . Amazon Neptune: It is a fully managed graph database service that enables you to store and query highly connected data sets. . Amazon DocumentDB: It is a fully managed document database service that is compatible with MongoDB workloads . . How to set up RDS . Sign in to your AWS account or create a new one if you don&#39;t have an account yet. . | Go to the Amazon RDS service page and click on &quot;Create database.&quot; . | Choose the database engine you want to use from the list of options. Amazon RDS supports several popular database engines, including MySQL, PostgreSQL, Oracle, SQL Server, and more. . | Choose the database edition and version you want to use. Each database engine has different editions and versions available, so make sure to choose the one that best suits your needs. . | Choose the instance class for your database. This will determine the amount of CPU, memory, and storage allocated to your database instance. . | Configure the settings for your database instance, including the database name, master username and password, and any additional settings specific to your chosen database engine. . | Choose the VPC and subnet where you want to launch your database instance. You can also choose to create a new VPC if you don&#39;t have one already. . | Configure the security group settings for your database instance. This will determine which IP addresses are allowed to connect to your database instance and what ports are open for incoming traffic. . | Choose any additional options you want to enable, such as automatic backups, encryption, or performance insights. . | Review your settings and click on &quot;Create database&quot; to launch your Amazon RDS instance. . | Example . . Video to follow: https://www.youtube.com/watch?v=Ng_zi11N4_c . Quiz . Which of the following is not an AWS database option? . A. Amazon RDS . B. Amazon Neptune . C. SQLite . D. Amazon DynamoDB . Which of the following is a file-based, lightweight RDBMS? . A. Amazon RDS . B. Amazon Neptune . C Amazon DynamoDB . D. SQLite . Which AWS service enables you to store and query highly connected datasets? . A. Amazon Relational Database Service (RDS) . B. Amazon DynamoDB . C. Amazon Neptune . D. Amazon DocumentDB .",
            "url": "https://tri3devopteam.github.io/devops/2023/04/02/AWSSQL.html",
            "relUrl": "/2023/04/02/AWSSQL.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "AWS Databases",
            "content": "What are the different types of AWS Databases? . In order to meet the particular requirements of various use cases, AWS provides a variety of database services, each with its own special features and advantages. . Relational databases are among the most widely used AWS database types. Amazon Aurora, Amazon RDS, and Amazon Redshift are just a few of the relational databases that AWS offers. These databases are excellent for structured data and can be applied to financial applications, e-commerce platforms, and content management systems. . Non-relational databases, also known as NoSQL databases, are also provided by AWS. These databases can easily handle high data volumes and were made for unstructured data. Amazon DocumentDB and Amazon DynamoDB are two well-known NoSQL databases that AWS offers. . The graph database is another kind of database that AWS provides. Graph databases are made to store and manage highly connected data, like that found in social networks or recommendation systems. One example of a graph database provided by AWS is Amazon Neptune. . In-memory databases are available through AWS, they offer low-latency speed for applications that require quick data access. Amazon ElastiCache is an example of an in-memory database that can be used for apps like gaming. . In conclusion, the vast variety of databases available by AWS makes it easy for users to use the database that will best fit their work. .",
            "url": "https://tri3devopteam.github.io/devops/markdown/week%2028/2023/03/28/redobigidea2-copy.html",
            "relUrl": "/markdown/week%2028/2023/03/28/redobigidea2-copy.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Duck DNS (Shaurya Goel)",
            "content": "How does Duck DNS Work? . Duck DNS is a free dynamic DNS service that allows users to assign a domain name to a dynamic IP address. . Overall, Duck DNS provides a convenient way to access your home network or devices from anywhere in the world, even if your ISP assigns you a dynamic IP address . How is Duck DNS useful for our project? Other Projects in General? . In general, Duck DNS can be useful for projects that involve remote access or control of a device, such as setting up a home security camera, remote desktop access, or hosting a website or game server from a home network. By using Duck DNS, the device or service can be accessed using a static hostname, which is more convenient than having to remember or constantly look up the device’s changing IP address. . In addition, Duck DNS is easy to set up and does not require any special hardware or software. It can be configured to update the IP address automatically, making it a reliable and low-maintenance solution for dynamic IP addresses. . Overall, Duck DNS is a useful tool for any project that requires a static hostname for remote access or control of a device or service. . Steps for Setup . Sign in with your DuckDNS account by visiting DuckDNS Link and selecting “Sign in with Github.” Enter information when prompted. | . . Once you have singed into your account, you will be prompted to create a subdomain. Enter a unique name for your subdomain, and then click the “add domain” button. | . . For the newly added domain, under “current ip”, change the ip address into the ip address that you want to access | . . Once the IP adress is entered under “current ip,” click the “update ip” button to confirm the change | . . Finally, you can use your DuckDNS subdomain to access your home network from the internet. | . . . Video and Demo . HACKS . HACK 1 - Create a diagram (canva) . What are the pros and cons of using Duck DNS | Show a diagram of an application running on AWS using a Duck DNS system | . HACK 2 - Write a reflection . Why do we use DNS? | How does Duck DNS work? | What makes Duck DNS unique? | How is Duck DNS useful for our projects? | What are the steps to set up Duck DNS? | . HACK 3 (Extra Credit) - Create your own Duck DNS Video .",
            "url": "https://tri3devopteam.github.io/devops/markdown/week%2020/2023/03/27/DuckDNS.html",
            "relUrl": "/markdown/week%2020/2023/03/27/DuckDNS.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "AWS Devolpment",
            "content": "by: Shivansh Goel . . Introduction . How does EC2 AWS Work? . EC2 (Elastic Compute Cloud) is a web service provided by AWS that allows customers to rent virtual machines (VMs) in the cloud to run their applications. EC2 instances can be launched from a variety of pre-configured Amazon Machine Images (AMIs) or custom images uploaded by the user. . When a user launches an EC2 instance, they can choose the type of instance they want based on the amount of CPU, memory, and storage required. They can also choose the region where the instance will be located and the type of operating system and software that will be installed on it. . Once an EC2 instance is launched, the user has full control over it, just as they would with a physical server. They can install their own software and applications, configure the network settings, and manage the storage. . Why is EC2 AWS useful for projects? . EC2 AWS is useful because once an EC2 instance is launched, then the user can do whattever they need to do with it just like if it were their own computer. . This allows a lot of scalibilty, Flexibility(EC2 provides users with a wide range of instance types, operating systems, and software options to choose from. . This allows users to select the resources that are best suited to their specific project requirements, and to easily switch between different configurations as needed), and Reability(EC2 is designed to be highly reliable, with built-in redundancy and failover mechanisms to ensure that applications remain available even in the event of hardware or software failures). . AWS Devolpment . Setting up the Server and Cloning the Project . Deployment Process: . First connect to an Ubuntu EC2 instance on AWS and then begin the system and software setup. | . Update and Upgrade the System . sudo apt update sudo apt upgrade | sudo apt install docker | sudo apt install docker-compose -y | sudo apt install html2text | sudo apt install python3-pip nginx | sudo pip3 install virtualenv | . Clone and Change Directory to project location . Clone your gitserver into a directory of your choosing . git clone https://github.com/yourgitserver | . Making sure that the Web Service can Run . To make sure that the Web Service to running properly . Run the main.py file and see if the server is able to run If there are some errors, try running the command: | pip install -r requirements.txt | . Make sure that there is a Dockerfile or that it is up to Date . Edit the Dockerfile: sudo nano Dockerfile Make sure that it looks like something like this: | . . Make sure that the docker-compose.yml is up to dagte . Edit the docker-compose.yml file and edit the left port to your own unique one, volumes, and the image | . Start Running Docker . sudo apt install docker | sudo apt install docker-compose -y | sudo docker-compose up -d | It should complete 9 steps of procesess to confirm that it is complete | . Make sure to Verify that the Web Application is working with Docker . docker-compose ps | . Make sure you find the application that matches the application name and ports. If you can’t find them that means that you did something wrong and that you should go back to finish other steps. . Testing Localpoint . To make sure that all the previous steps are running correctly and the everything is going on the right path. You should run these commands to see if there is a success or a failure. . curl http://localhost:[yourport] If there is a “Failed to connect”, then that means that something is not going right and that you should look at the changes you have made in the server. | Another command to run would be: curl http://localhost:[yourport] | html2text | . | . Test preparation for Docker Web Application using IP for Internet Access . First make sure to install Nginx . Run the command to make sure that Nginx is installed within the system: sudo apt install nginx Move to /etc/nginx/sites-available whichis where the Nginx Server Configuration Files are located | Create your own configuration in the directory with a name of your choosing (sudo nano example) | Add these stuff to the Nginx Configuration File: | . . Make sure to edit the server_name (IP Adress), the proxy pass POrt, and the docker-compose . Activate the NGINX Configuration . sudo ln -s /etc/nginx/sites-available/[your config file] /etc/nginx/sites-enabled[your config file] | sudo nginx -t If there are errors then you must go back and repeat the steps of the NGINX configuration in the sites-available directory and see if there is anything wrong or misplaced. | . Last Steps before the Last Steps . To Conclude the first part, make sure that the internet is now running your web application: Go on the internet and run this: http://(your ip address) | . The Last Steps . The last Steps involve setting up the DNS Server . Video . Live Demo: . Hacks Time . FRQ Question Hacks (Answer with more than 2-3 full complete sentneces): . Are there any outdated Nginx/Docker functionalities to address? . | Is there anything unclear that we need to communicate further to the students for deployment? . | . Diagram . To Truly understand Nginx and why we are using it, it is important to compare it to other web servers? Compare NGINX with lighttpd in a Venn Diagram, and place the image below: .",
            "url": "https://tri3devopteam.github.io/devops/markdown/week%2020/2023/03/27/AWSDevolpment.html",
            "relUrl": "/markdown/week%2020/2023/03/27/AWSDevolpment.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "KASM Intro Guide",
            "content": "What is KASM? . In the words of the KASM co-director: . “KASM Workspaces delivers interactive access to GUI applications and desktop environments running in docker containers. The containers are streamed directly to the browser. The platform is similar to Citrix and VMware Horizon, but entirely container based.” . Essentially, KASM allows you to stream applications from docker containers. . Functionality Link: . KASM Functionalities . There are many different types of workspaces that KASM offers, such as: . Desktop Workspaces: Here, you can get desktop access in a moment of seconds from any device and from anywhere around the world. It is done in a secure manner through whichever web browser you like. | Functionality Demo: . Web Isolation Workspaces: There is a “zero-trust browser isolation” service. You can launch a private web browsing instance, where there is “no risk of compromising your endpoint.” | Functionality Demo: . Application Workspace (App Streaming): This is the main workspace which we are going to focus on. This workspace allows for an application container where the KASM platform does most of the heavylifting for us. It is customizable, open source, and kept up to date. You can choose either a server or cloud deployment option, and you can manage your own Self-Hosted Server in a separate version type created for this situation. | There are three different option plans for KASM: . Community Plan: Offers all enterprise features, and it is for personal use. You get community support, but there is a 5 concurrent session limit. . | Professional Plan: This is a $5 user/month plan. You get next business day support with this plan and a higher session limit. . | Their recommended plan, the Enterprise Plan: This is a $10 user/month plan, where you can get same business day support with all of the supported professional plan features. . | Why KASM? . It is incredibly scalable, and deployment automation can be done “for unique requirements and at massive scale” . | Easy to Access: You can log in from any web browser and whatever you are deploying can be hosted anywhere: private cloud, KASM hosted, etc. . | High Efficiency Levels: Uses Docker containers, reducing the resource requirements and creating fast session boots . | Very well-managed security: 2FA, LDAP, data loss prevention, security groups for privilege control of deployment, logging, and web filtering. . | Open-Source: All container tech available on Docker Hub and GitHub for people to view . |",
            "url": "https://tri3devopteam.github.io/devops/markdown/2023/03/26/kasm.html",
            "relUrl": "/markdown/2023/03/26/kasm.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Advanced Security Certbot",
            "content": "Certbot is a software run in Python. It is meant to convert HTTP sites to work with HTTPS, which is much more secure. Let’s first explore the background of HTTP to HTTPS: HTTPS and HTTP are almost essentially the same protocols, but HTTPS uses SSL to encrypt the requests and responses. Furthermore, HTTPS is also used in the form of SSL certificates used to encrypt and digitally sign these requests. HTTP runs on port 80, and is an incredibly insecure platform to run a site on. HTTPS runs on ports 80 and 443, and needs a Certification Authority signature for the SSL certificate being used on the https site. APPLICATION IN CSP, PROS/CONS During Trimester 1, while initially setting up our AWS deployment, we attempted to implement Let’s Encrypt, a certificate authority manager, along with Certbot. The Certbot configuration is relatively easy: as shown in Trimester 1, you have to install a couple of packages, create the certbot folders on the AWS deployment server, and activate HTTPS for your domain. . Though it is relatively easy to use, we decided to weigh out some of the pros/cons of using Let’s Encrypt &amp; Certbot: PROS: . Let’s Encrypt is a free service. | It is issued very efficiently. | It is something that most of our students are already familiar with, so it is a smoother process to setup. CONS: | Certificates have to be replaced/renewed every 90 days. This can be a painful process, especially for multiple sites and groups to do. | Some domains block Let’s Encrypt, and have relationships with other SSL providers. | It is a platform that is vulnerable to malware attacks. Almost 15 thousand Let’s Encrypt certificates have been issued to phishing sites. Is this another risk that we want to factor in? In our opinion, this can still be a useful tool, because it means that some Let’s Encrypt sites are dangerous, while millions of others are much safer. It is still important to keep in mind. | Most private domains that you use Certbot to secure cost money to purchase and use. | In class Certbot questions activity . What service owns Certbot? | How often do certificates need to be replaced/renewed? | How many certificates have been issued by Certbot? | Hacks . Follow the instructions below and provide a full screenshot of all terminal commands after and including sudo certbot --apache all the way until it asks for the domain you want to secure. At this point you can take a screenshot and cancel the process. If you choose to continue the setup process and get Certbot fully working and show a before and after screenshot of your domain with http amd https connection we will grant extra credit points on hacks, or make up for lost points in other areas. | . . To install and setup Certbot follow these instructions: . You will first need to have a domain that is not yet secured. You can check if it is secure by going to the domain on your browser and making sure that there is no lock symbol at the top, or that the prefix to the domain is http, rather than https. Be careful here because some of you may have your domain already secured, and I am not sure what would happen if you did this on an already secure domain. Getting a domain will cost around 7$ a year so I cannot demonstrate this step, nor expect anyone else to. Lots of people would already have their AWS running with Certbot, so if you don’t have a domain to use don’t worry as that last step won’t be necessary. | Unsecured HTTP connection . . Secure HTTPS connection . . Install Certbot through the terminal with the following command sudo apt-get install certbot . | Next we have to choose a plugin to obtain and install the certificates. For Apache web servers, you can use the following command. If you are using a different browser engine, you can choose the corresponding plugin for that browser engine. You might have issues with this if you don’t have the apache plugin installed. To fix this run the command sudo apt-get install python3-certbot-apache. After that run the second line of code. sudo certbot --apache . | Next, you will need to follow the given prompts and Certbot will help us set the rest up. You will need to enter your email for renewals and other things. It will also ask to share your email with another organization, to which you can respond no. . | You are most likely done with your hacks if you have reached this point. . You will have to create a DNS text record with a specific value that certbot can use to make sure you actually have ownership of the domain. . | Now you have to verify the installation and you can check if it’s working by checking the website in your browser, or using a tool such as SSL Labs, which can check for an SSL certificate. . | This is optional. Now you can ensure that your certbot will continue working with minimum maintenance. You can do this by making the certificate auto renew using this command. sudo certbot renew . |",
            "url": "https://tri3devopteam.github.io/devops/markdown/2023/03/26/certbot.html",
            "relUrl": "/markdown/2023/03/26/certbot.html",
            "date": " • Mar 26, 2023"
        }
        
    
  

  
  
      ,"page0": {
          "title": "",
          "content": "Blogs .",
          "url": "https://tri3devopteam.github.io/devops/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page7": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tri3devopteam.github.io/devops/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}